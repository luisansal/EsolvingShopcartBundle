<?php

namespace Esolving\ShopcartBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\NoResultException;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface {

    public function findAllByLanguage($xlanguage, $parameters) {
        $qb = $this->createQueryBuilder('user');

        if ($parameters['sort'] && $parameters['direction']) {
            $qb->orderBy($parameters['sort'], $parameters['direction']);
        }

        $q = $qb->addSelect('user_rolesaccess', 'user_rolesaccess_role_type', 'user_rolesaccess_role_type_languages', 'user_sex_type', 'user_sex_type_languages', 'user_groupblod_type', 'user_groupblod_type_languages', 'user_distrit_type', 'user_distrit_type_languages')
                ->join('user.rolesaccess', 'user_rolesaccess')
                ->join('user_rolesaccess.role_type', 'user_rolesaccess_role_type')
                ->join('user_rolesaccess_role_type.languages', 'user_rolesaccess_role_type_languages')
                ->join('user.sex_type', 'user_sex_type')
                ->join('user_sex_type.languages', 'user_sex_type_languages')
                ->join('user.groupblod_type', 'user_groupblod_type')
                ->join('user_groupblod_type.languages', 'user_groupblod_type_languages')
                ->join('user.distrit_type', 'user_distrit_type')
                ->join('user_distrit_type.languages', 'user_distrit_type_languages')
                ->where($qb->expr()->eq('user_rolesaccess_role_type_languages.language', $qb->expr()->literal($xlanguage)))
                ->andWhere($qb->expr()->eq('user_sex_type_languages.language', $qb->expr()->literal($xlanguage)))
                ->andWhere($qb->expr()->eq('user_groupblod_type_languages.language', $qb->expr()->literal($xlanguage)))
                ->andWhere($qb->expr()->eq('user_distrit_type_languages.language', $qb->expr()->literal($xlanguage)))
                ->andWhere($qb->expr()->neq('user_rolesaccess_role_type.name', $qb->expr()->literal('ROLE_ADMIN')))
                ->getQuery()
        ;

        return $q->getResult();
    }

    public function findOneByIdByLanguage($xuser_id, $xlanguage) {
        $qb = $this->createQueryBuilder('user');
        $q = $qb->addSelect('user_rolesaccess', 'user_rolesaccess_role_type', 'user_rolesaccess_role_type_languages', 'user_sex_type', 'user_sex_type_languages', 'user_groupblod_type', 'user_groupblod_type_languages', 'user_distrit_type', 'user_distrit_type_languages')
                ->join('user.rolesaccess', 'user_rolesaccess')
                ->join('user_rolesaccess.role_type', 'user_rolesaccess_role_type')
                ->join('user_rolesaccess_role_type.languages', 'user_rolesaccess_role_type_languages')
                ->join('user.sex_type', 'user_sex_type')
                ->join('user_sex_type.languages', 'user_sex_type_languages')
                ->join('user.groupblod_type', 'user_groupblod_type')
                ->join('user_groupblod_type.languages', 'user_groupblod_type_languages')
                ->join('user.distrit_type', 'user_distrit_type')
                ->join('user_distrit_type.languages', 'user_distrit_type_languages')
                ->where($qb->expr()->eq('user_rolesaccess_role_type_languages.language', $qb->expr()->literal($xlanguage)))
                ->andWhere($qb->expr()->eq('user_sex_type_languages.language', $qb->expr()->literal($xlanguage)))
                ->andWhere($qb->expr()->eq('user_groupblod_type_languages.language', $qb->expr()->literal($xlanguage)))
                ->andWhere($qb->expr()->eq('user_distrit_type_languages.language', $qb->expr()->literal($xlanguage)))
                ->andWhere($qb->expr()->eq('user.id', ':user_id'))
                ->setParameter('user_id', $xuser_id)
                ->getQuery()
        ;
        return $q->getOneOrNullResult();
    }

    public function loadUserByUsername($codeOrEmail) {
        $q = $this
                ->createQueryBuilder('user')
                ->addSelect('roles', 'role_type')
                ->join('user.rolesaccess', 'roles')
                ->join('roles.role_type', 'role_type')
                ->where('user.code = :code')
                ->andWhere('user.status = 1')
                ->setParameter('code', $codeOrEmail)
                ->getQuery()
        ;

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('Unable to find an active admin EsolvingShopcartBundle:User object identified by "%s".', $codeOrEmail), null, 0, $e);
        }

        return $user;
    }

    public function refreshUser(UserInterface $user) {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $class));
        }

        return $this->loadUserByUsername($user->getUsername());
    }

    public function supportsClass($class) {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }

}
