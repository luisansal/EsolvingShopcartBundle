<?php

namespace Esolving\ShopcartBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRepository extends EntityRepository {

    public function findOneByIdByLanguage($xservice_id, $xlanguage) {
        $qb = $this->createQueryBuilder('service');
        $q = $qb->addSelect('languages')
                ->join('service.languages', 'languages')
                ->where($qb->expr()->eq('languages.language', ':language'))
                ->andWhere($qb->expr()->eq('service.status', ':status'))
                ->andWhere($qb->expr()->eq('service.id', ':service_id'))
                ->setParameters(
                        array(
                            'language' => $xlanguage,
                            'status' => '1',
                            'service_id' => $xservice_id
                        )
                )
                ->getQuery()
        ;
        return $q->getOneOrNullResult();
    }

    public function findAllByCategoryIdByLanguage($xcategory_id, $xlanguage) {
        $qb = $this->createQueryBuilder('service');
        $q = $qb->addSelect('categories', 'languages', 'service_languages')
                ->join('service.languages', 'service_languages')
                ->join("service.categories", 'categories')
                ->join('categories.languages', 'languages')
                ->where($qb->expr()->eq("categories.id", ":category_id"))
                ->andWhere($qb->expr()->eq("service.status", "1"))
                ->andWhere($qb->expr()->eq("categories.status", "1"))
                ->andWhere($qb->expr()->eq('languages.language', ':language'))
                ->andWhere($qb->expr()->eq('service_languages.language', ':service_language'))
                ->setParameters(array(
                    'category_id' => $xcategory_id,
                    'language' => $xlanguage,
                    'service_language' => $xlanguage
                        )
                )
                ->getQuery();
        return $q->getResult();
    }

    public function findAllMaxByLanguage($max, $xlanguage) {
        $qb = $this->createQueryBuilder('service');
        $q = $qb->addSelect('languages', 'categories', 'languages_categories')
                ->join('service.languages', 'languages')
                ->join('service.categories', 'categories')
                ->join('categories.languages', 'languages_categories')
                ->where($qb->expr()->eq('service.status', ':status'))
                ->andWhere($qb->expr()->eq('languages.language', ':language'))
                ->andWhere($qb->expr()->eq('languages_categories.language', ':language_category'))
                ->orderBy('service.dateregistered', 'desc')
                ->setParameters(
                        array(
                            'status' => '1',
                            ':language' => $xlanguage,
                            'language_category' => $xlanguage
                        )
                )
                ->setMaxResults($max)
                ->getQuery()
        ;
        return $q->getResult();
    }

}
