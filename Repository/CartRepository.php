<?php

namespace Esolving\ShopcartBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CartRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CartRepository extends EntityRepository {

    public function findOneByUserIdByLanguage($xuser_id, $xlanguage) {
        $qb = $this->createQueryBuilder('cart');
        $q = $qb
                ->addSelect('items', 'service', 'service_languages', 'categories', 'category_languages')
                ->leftJoin('cart.items', 'items')
                ->leftJoin('items.service', 'service', 'WITH', $qb->expr()->eq('service.status', ':service_status'))
                ->leftJoin('service.languages', 'service_languages', 'WITH', $qb->expr()->eq('service_languages.language', ':service_language'))
                ->leftJoin('service.categories', 'categories')
                ->leftJoin('categories.languages', 'category_languages', 'WITH', $qb->expr()->eq('category_languages.language', ':category_language'))
                ->where($qb->expr()->eq('cart.user', ':user_id'))
                ->andWhere($qb->expr()->gte('cart.expiredAt', ':date_now'))
                ->andWhere($qb->expr()->eq('cart.success', ':cart_success'))
                ->andWhere($qb->expr()->eq('cart.status', ':cart_status'))
                ->setParameters(
                        array(
                            'cart_status' => true,
                            'cart_success' => false,
                            'date_now' => new \DateTime(),
                            'user_id' => $xuser_id,
                            'service_language' => $xlanguage,
                            'category_language' => $xlanguage,
                            'service_status' => true
                        )
                )
                ->getQuery()
        ;
        return $q->getOneOrNullResult();
    }

}
