<?php

namespace Esolving\ShopcartBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TypeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TypeRepository extends EntityRepository {

    public function findSettingTypeNoRepeatByLanguage($xlanguage, $current_setting_id) {
        $settings = $this->getEntityManager()->getRepository('EsolvingShopcartBundle:Setting')->findAllExcept($current_setting_id);
        foreach ($settings as $settingV) {
            $settingsArray[] = $settingV->getSettingType()->getId();
        }
        $qb = $this->createQueryBuilder('type');
        $q = $qb->addSelect('languages')
                ->join("type.languages", "languages")
                ->where($qb->expr()->eq("type.category", ":category"))
                ->andWhere($qb->expr()->neq("type.name", ':name'))
                ->andWhere($qb->expr()->eq("languages.language", ":language"))
                ->andWhere($qb->expr()->eq("type.status", "1"))
                ->andWhere($qb->expr()->notIn('type.id', $settingsArray))
                ->setParameter('category', 'setting')
                ->setParameter('name', 'setting')
                ->setParameter('language', $xlanguage)
                ->getQuery();
        return $q->getResult();
    }

    public function findRoleTypeNoRepeatByLanguage($xlanguage) {
        $roles = $this->getEntityManager()->getRepository('EsolvingShopcartBundle:Role')->findAllByLanguage($xlanguage);
        foreach ($roles as $roleV) {
            $rolesArray[] = $roleV->getRoleType()->getId();
        }
        $qb = $this->createQueryBuilder('type');
        $q = $qb->addSelect('languages')
                ->join("type.languages", "languages")
                ->where($qb->expr()->eq("type.category", ":category"))
                ->andWhere($qb->expr()->neq("type.name", ':name'))
                ->andWhere($qb->expr()->eq("languages.language", ":language"))
                ->andWhere($qb->expr()->eq("type.status", "1"))
                ->andWhere($qb->expr()->notIn('type.id', $rolesArray))
                ->setParameter('category', 'role')
                ->setParameter('name', 'role')
                ->setParameter('language', $xlanguage)
                ->getQuery();
        return $q->getResult();
    }

    public function findByCategoryByLanguage($xcategory, $xlanguage) {
        $qb = $this->createQueryBuilder('type');
        $q = $qb->addSelect('languages')
                ->join("type.languages", "languages")
                ->where($qb->expr()->eq("type.category", ":category"))
                ->andWhere($qb->expr()->neq("type.name", ':name'))
                ->andWhere($qb->expr()->eq("languages.language", ":language"))
                ->andWhere($qb->expr()->eq("type.status", "1"))
                ->setParameter('category', $xcategory)
                ->setParameter('name', $xcategory)
                ->setParameter('language', $xlanguage)
                ->getQuery();
        return $q->getResult();
    }

}
